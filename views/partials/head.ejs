<title>Work Orbit</title>
<link href="//maxcdn.bootstrapcdn.com/bootstrap/3.3.1/css/bootstrap.min.css" rel="stylesheet">
<link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css">
<link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/bootstrap/3.3.1/css/bootstrap.min.css">
<link rel="stylesheet" type="text/css" href="/style.css">
<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
<script src="/script.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
<script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCLhw12hTzbrWIAIepH3EoDvKGs1WhetTQ"></script>
<script type="text/javascript" src="https://apicdn.walkscore.com/api/v1/traveltime_widget/js?wsid=3950dacfe4b9f83564d394cab5e9fb88"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
<script src="//cdn.jsdelivr.net/rsvp/3.0.6/rsvp.js"></script>

<script type="text/javascript">
//(	function() {

		'use strict';

			// Initialize the global map //
			var time; var address; var mode;

			// Options on the Widgets    //
			
			var use_rush_hour_time = true;
			
			var clickTest; var data_str;
			
			var map; var homeMarker; var workMarker;

			var res; 
			
			var homeIcon =  {
								url : 'https://s3.amazonaws.com/geohackers-for-good/home.svg',
								scaledSize: new google.maps.Size(30,30),
								origin: new google.maps.Point(0,0),
								anchor: new google.maps.Point(15, 15)
							};
							
			homeMarker = new google.maps.Marker(
				{	
					position: new google.maps.LatLng(47.6222788,-122.336828599), // latLng,
					map : null,
					icon: homeIcon								
				}
			);
			
			
			var workIcon =  {
					url : 'https://s3.amazonaws.com/geohackers-for-good/briefcase.svg',
					scaledSize: new google.maps.Size(30,30),
					origin: new google.maps.Point(0,0),
					anchor: new google.maps.Point(15, 15)
				};					
				
			
			// Maybe define the marker here //


			// bounds of the desired area
			var allowedBounds = new google.maps.LatLngBounds(
				 new google.maps.LatLng(47.417093, -122.625957), 
				 new google.maps.LatLng(47.848820, -121.908861)
			);
			
			var lastValidCenter; 			

//			var neighborhoodStyles;

			var prontoMarkers = [];

			var prontoIcon =  {
				url : 'https://s3.amazonaws.com/geohackers-for-good/pronto_logo_hexa_hosted.svg',
				scaledSize: new google.maps.Size(30,30),
				origin: new google.maps.Point(0,0),
				anchor: new google.maps.Point(15, 15)
			};

			var linkIcon =  {
				url : 'https://s3.amazonaws.com/work-orbit/link_light_rail.png',
				scaledSize: new google.maps.Size(30,30),
				origin: new google.maps.Point(0,0),
				anchor: new google.maps.Point(15, 15)
			};

			var linkStyles; var linkMarker;
			
			var infoWindow = new google.maps.InfoWindow( { size: new google.maps.Size(100,50) } );

			var geocoder     = new google.maps.Geocoder();
			var geocoder_re  = null;

			// DirectionService //
			var directionsService = new google.maps.DirectionsService();
			var directionsDisplay = new google.maps.DirectionsRenderer();

			// Home to Work //
				// Consider origin/dest
			var home = {};
/*			var work = {
							latLng : new google.maps.LatLng(47.6222788,-122.336828599),
							address: '1100 2nd Ave #500, Seattle, WA 98101'
						};
*/

			var work_location; var work_lat; var work_lng; var work_location_str; var work_place;

			var mode_map; var widget;

			var ltlng = null;

			// Here are the Pronto neighborhoods //

			var pronto_available_neighborhoods =
				[	'Westlake',
					'Laurelhurst',
					'Ravenna',
					'Bryant',
					'Portage Bay',
					'Montlake',
					'Broadway',
					'First Hill',
					'Yesler Terrace',
					'Pioneer Square',
					'International District',
					'Belltown',
					'Eastlake',
					'South Lake Union',
					'Lower Queen Anne',
					'East Queen Anne',
					'Central Business District'
				];


			function initialize() {

				time = Number.parseInt(document.URL.split('/')[4]);
				mode = document.URL.split('/')[5];

				address = document.URL.split('/')[6];
				address = address.replace(/%20/g,' ');

				console.log(address);

				var promiseGeocode = new RSVP.Promise(function (resolve, reject) {
					var geocoder = new google.maps.Geocoder();
					geocoder.geocode( { 'address': address}, function(results, status) {
//						res = results;
//						console.log(results);
						if (status == google.maps.GeocoderStatus.OK) {
							work_location     = results[0].geometry.location;
							work_lat          = work_location.k;
							work_lng          = work_location.D;
							work_location_str = work_lat + ',' + work_lng;
							work_place        = results[0].place_id;
							resolve(work_location);
							console.log('Successful resolution :D ', work_location_str);
							console.log(work_place);
						} else {
							work_location     = new maps.google.latLng(47.6222788, -122.336828599);
							work_lat          = 47.6222788;
							work_lng          = -122.336828599;
							work_location_str = work_lat + ',' + work_lng;
							work_place        = null;
							resolve(work_location);
							console.log('Unable to find the location!!!');
							resolve(work_location);
						}
					});
				});


				promiseGeocode.then( function(work_location) {

					console.log('The promise is passed');

					var mapCanvas  = document.getElementById('map-canvas');

					var mapOptions = {
										mapTypeId : google.maps.MapTypeId.ROADMAP,
										center    : new google.maps.LatLng(work_lat , work_lng),
										zoom      : 13
									 };

					// This creates the actual map object and attaches it to the HTML object //
					map = new google.maps.Map( mapCanvas, mapOptions );
					console.log('the map is created');

					// Add an info window on the Icon based on the geocoder result... //
					
					////////////////////////////////////////////////////////


					var neighborhoodStyles = {
						fillColor     : 'green',
						fillOpacity   : 0.7,
						strokeColor   : 'blue',
						strokeOpacity : 0.6,
						strokeWeight  : 8
					};

					/////////////////// Load the Data ! ///////////////////

					// Loads the big, neighborhood data-JSON //

					// Sorted by neighborhood name
						// Make "type":"Neighborhood"
						// Make this have a callback for the infoWindow //
					map.data.loadGeoJson('https://s3.amazonaws.com/work-orbit/all_Seattle_data_test.geojson', {idPropertyName:"name"},
						function (polys) {   // Set the neighborhood styling //
							polys.forEach(
								function(poly){
									// Add the styling //
									map.data.overrideStyle(poly, neighborhoodStyles);
								}
							);
						}
					);

					// Sorted by "type":"Pronto"
						// Toggle Pronto Icons //
					var prontoIcon =  {
						url : 'https://s3.amazonaws.com/geohackers-for-good/pronto_logo_hexa_hosted.svg',
						scaledSize: new google.maps.Size(30,30),
						origin: new google.maps.Point(0,0),
						anchor: new google.maps.Point(15, 15)
					};

					var prontoStyles = {
						icon: prontoIcon,
						visible: false,
						clickable: true
					}; // Set title to the station.address

					map.data.loadGeoJson('https://s3.amazonaws.com/work-orbit/formatted_pronto_locations_aug.geojson', {idPropertyName:"name"},
						function (pronto_points)
						{
							pronto_points.forEach(
								function(pronto_point){
//										console.log(pronto_point);
									prontoStyles.title = pronto_point.getProperty('address') || 'Pronto Station';
									map.data.overrideStyle(pronto_point, prontoStyles);
								}
							);
						}
					);
					
					// Sorted by "type":"Link"

					var linkIcon =  {
						url : 'https://s3.amazonaws.com/work-orbit/link_light_rail.png',
						scaledSize: new google.maps.Size(30,30),
						origin: new google.maps.Point(0,0),
						anchor: new google.maps.Point(15, 15)
					};					
					
					var linkStyles = {
						icon      : linkIcon,
						visible   : true,
						clickable : true
					}; // Set title to the station.address

					map.data.loadGeoJson('https://s3.amazonaws.com/work-orbit/fixed_link_light_rail.geojson', {idPropertyName:"station_number"},
						function (link_points)
						{
							link_points.forEach(
								function(link_point){
									linkStyles.title = link_point.getProperty('description') || 'Link Light Rail Station';
									map.data.overrideStyle(link_point, linkStyles);
								}
							);
						}
					);
					
					
					// https://s3.amazonaws.com/work-orbit/King_county_link.geojson //


					var rapidRideStyles = {
						visible       : true,
						strokeColor   : 'red',
						strokeWeight  : 3,
						strokeOpacity : 0.7,
						zIndex        : 100
					}; 

					map.data.loadGeoJson('https://s3.amazonaws.com/work-orbit/Rapid_Ride_lines.geojson', {idPropertyName:"Line Letter"},
						function (rapid_lines)
						{
							rapid_lines.forEach(
								function(rapid_line){
//									console.log(rapid_line);
									map.data.overrideStyle(rapid_line, rapidRideStyles);
								}
							);
						}
					);
					
					
					
					// Add in the Work Icon //
					workMarker = new google.maps.Marker(
						{	
							position: work_location,
							map     : map,
							icon    : workIcon
							// ,place   : work_place 
							// This should automatically append an infoWindow //
						}
					);
					
					
					/////////////////// Add the widget /////////////////////

					// Styling the Data //
					mode_map = {
						'Car': walkscore.TravelTime.Mode.DRIVE,
						'Walk': walkscore.TravelTime.Mode.WALK,
						'Bike': walkscore.TravelTime.Mode.BIKE,
						'Bus': walkscore.TravelTime.Mode.TRANSIT
					};

					widget = new walkscore.TravelTimeWidget(
					{
						color:'#00000000',
						map: map,
						origin: work_location_str,
						show: true,
						mode: mode_map['car'],
						time: time,
						congestion: use_rush_hour_time
					});

					//////////////////////////////////////////////////////////////

					// Pan Restrictions //
					lastValidCenter = map.getCenter();
					
					//////////////////////////////////////////////////////////////

					// Add the click listener for events //
					map.data.addListener('click', function(event) {
					
						// Save the latLng to anchor the marker and the infoWindow // 
						clickTest = event;
						console.log(event.latLng);

						// Set the homeMarker //							
							// This checks the initial condition, where we do not want 
							//	it to appear on the map before clicking.
						if (homeMarker.map === null) {
							homeMarker.setMap(map);
						}

						// This changes the position property on the global variable. 
						homeMarker.setPosition(event.latLng);
						home.latLng = new google.maps.LatLng( event.latLng.lat(), event.latLng.lng());							
							
						// Pronto Bikes //

						// Check if the current neighborhood is in the list //
						if (pronto_available_neighborhoods.indexOf(event.feature['k']['name']) > -1 ){
							console.log('Pronto is available here!');
							turnOnProntoMarkers();
						} else {
							console.log('Pronto NOT available here');
							turnOffProntoMarkers();
						}
						
						////////////////////// The InfoWindows /////////////////////

						// Populate the string // 
						data_str  = '<div> Welcome to ' + event.feature['k']['name'] + '. ';
						data_str += 'The median household income is ' + event.feature['k']['Median_Household_Income'] + '. ';
						data_str += 'The average commute takes ' + event.feature['k']['Median_Commute_Time'] + '. ';
						data_str += 'The following jobs are common here: ';
						data_str += '<ul>';
						
						event.feature['k']['Employment'].forEach( function(job) {
							data_str += '<li>' + job + '</li>';
						});
						data_str += '</ul><br>';
						data_str += '<img src="http://www.zillow.com/widgets/GetVersionedResource.htm?path=/static/logos/Zillowlogo_150x40.gif" width="150" height="40" alt="Zillow Real Estate Search" />';
						data_str += '<div>';
						
						
						// See how we can add Walkscore the the exact point //
					
						infoWindow.setContent(data_str);
						
						var anchor = new google.maps.MVCObject();
						anchor.set("position",event.latLng);
						infoWindow.open(map,anchor);
						
					
						// Check if the neighborhood is pronto enabled //
					
					});					
				});
				
				
				
				
				////////////////////////////////////////////////////////////
				
				
				//// Map Bounds ////

				google.maps.event.addListener(map, 'center_changed', function() {
					console.log(lastValidCenter);					
					if (allowedBounds.contains(map.getCenter())) {
						// still within valid bounds, so save the last valid position
						lastValidCenter = map.getCenter();
						return;
					}
					// not valid anymore => return to last valid position
					map.panTo(lastValidCenter);
				});
				
			}

function turnOffProntoMarkers () {
		map.data.forEach(
							function( datum ) { 													
								if ( datum.k.type === 'Pronto') { 												
									map.data.overrideStyle( datum, { visible: false });												
								}
							}
		);
}

function turnOnProntoMarkers () {
		map.data.forEach(
							function( datum ) { 													
								if ( datum.k.type === 'Pronto') { 												
									map.data.overrideStyle( 
										datum, { visible: true, icon: prontoIcon }
									);
								}
							}
		);
}

			
// This calls the initialize() function (above) after the page loads //
google.maps.event.addDomListener(window, 'load', initialize);
//})();
</script>
